const fs = require('fs');
const colorTokens = require('../../build/json/variables-color.json');
const sizeTokens = require('../../build/json/variables-size.json');

/**
 * COLORS
 */
const brandColors = colorTokens.color.brand;
const fontColors = colorTokens.color.font;

const brandColorOptions = [].concat.apply([], Object.keys(brandColors)
  .map(colorName => (
    Object.keys(brandColors[colorName])
      .map(colorGrade => `${colorName}-${colorGrade}`)
  )));

const fontColorOptions = [].concat.apply([], Object.keys(fontColors)
  .map(colorName => (
    Object.keys(brandColors[colorName])
      .map(colorGrade => `${colorName}-${colorGrade}`)
  )));

/**
 * SIZES
 */
const { size } = sizeTokens;

const borderSizeOptions = Object.keys(size.border);
const borderRadiusSizeOptions = Object.keys(size['border-radius']);
const boxShadowSizeOptions = Object.keys(size['box-shadow']);
const breakpointSizeOptions = Object.keys(size.breakpoint);
const fontSizeOptions = Object.keys(size.font);
const heightSizeOptions = Object.keys(size.height);
const lineHeightSizeOptions = Object.keys(size['line-height']);
const opacitySizeOptions = Object.keys(size.opacity);
const spacingSizeOptions = Object.keys(size.spacing);
const widthSizeOptions = Object.keys(size.width);
const zIndexSizeOptions = Object.keys(size['z-index']);

/**
 * UTILITY FUNCTIONS
 */
const writeArray = (array, arrayName, options = { newLine: true }) => {
  let result = `const ${arrayName} = [`;

  array.forEach(element => {
    result = `${result}\n  '${element}',`;
  });

  return `${result}\n];\n${options.newLine ? '\n' : ''}`;
};

const writeExport = string => 'export '.concat(string);

const createFileHeader = currentFile => `/**\n* This file was autogenerated. DO NOT edit the contents of this file directly.\n*/\n\n${currentFile}`; // eslint-disable-line max-len

/**
 * TOKEN CREATION
 */
const createColorTokens = currentFile => {
  let result = currentFile;

  result = result.concat(writeExport(writeArray(brandColorOptions, 'BRAND_COLORS')));
  result = result.concat(writeExport(writeArray(fontColorOptions, 'FONT_COLORS')));

  return result;
};

const createSizeTokens = currentFile => {
  let result = currentFile;

  result = result.concat(writeExport(writeArray(borderSizeOptions, 'BORDER_SIZES')));
  result = result.concat(writeExport(writeArray(borderRadiusSizeOptions, 'BORDER_RADIUS_SIZES')));
  result = result.concat(writeExport(writeArray(boxShadowSizeOptions, 'BOX_SHADOW_SIZES')));
  result = result.concat(writeExport(writeArray(breakpointSizeOptions, 'BREAKPOINT_SIZES')));
  result = result.concat(writeExport(writeArray(fontSizeOptions, 'FONT_SIZES')));
  result = result.concat(writeExport(writeArray(heightSizeOptions, 'HEIGHT_SIZES')));
  result = result.concat(writeExport(writeArray(lineHeightSizeOptions, 'LINE_HEIGHT_SIZES')));
  result = result.concat(writeExport(writeArray(opacitySizeOptions, 'OPACITY_SIZES')));
  result = result.concat(writeExport(writeArray(spacingSizeOptions, 'SPACING_SIZES')));
  result = result.concat(writeExport(writeArray(widthSizeOptions, 'WIDTH_SIZES')));
  result = result.concat(writeExport(writeArray(zIndexSizeOptions, 'Z_INDEX_SIZES', { newLine: false })));

  return result;
};

/**
 * WRITE FILE
 */
const writeFile = () => {
  let tokensData = '';

  tokensData = createFileHeader(tokensData);
  tokensData = createColorTokens(tokensData);
  tokensData = createSizeTokens(tokensData);

  fs.writeFileSync(`${__dirname}/../../build/tokens.js`, tokensData);
};

module.exports = writeFile;
